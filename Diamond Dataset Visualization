# import all packages and set plots to be embedded inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

%matplotlib inline

# load in the dataset into a pandas dataframe
diamonds = pd.read_csv('diamonds.csv')
diamonds.head()

# univariate plot of diamond prices
bin_edges = 10 ** np.arange(2.5, 4.3+0.1, 0.1)
plt.hist(data = diamonds, x = 'price', bins = bin_edges);
plt.xscale('log');
tick_locs = [300, 500, 1000, 3000, 5000, 10000, 20000];
plt.xticks(tick_locs, tick_locs);

# univariate plot of carat weights
bin_edges = 10 ** np.arange(-0.7, 0.7+0.01, 0.01)
plt.hist(data = diamonds, x = 'carat', bins = bin_edges);
plt.xscale('log');
tick_locs = [0.2, 0.3, 0.4, 0.5, 0.7, 1.0, 1.5, 2.0, 5.0];
plt.xticks(tick_locs, tick_locs);

# univariate plots of cut
cut_order = ['Fair', 'Good', 'Very Good', 'Premium', 'Ideal']
ordered_cut = pd.api.types.CategoricalDtype(ordered = True, categories = cut_order)
diamonds['cut'] = diamonds['cut'].astype(ordered_cut)

base_color = sb.color_palette()[0]
sb.countplot(data = diamonds, x = 'cut', color = base_color);

# univariate plots of color
color_order = [ 'J', 'I', 'H', 'G', 'F', 'E','D']
ordered_color = pd.api.types.CategoricalDtype(ordered = True, categories = color_order)
diamonds['color'] = diamonds['color'].astype(ordered_color)

base_color = sb.color_palette()[0]
sb.countplot(data = diamonds, x = 'color', color = base_color);

# univariate plots of clarity grades
clarity_order = ['I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF']
ordered_clarity = pd.api.types.CategoricalDtype(ordered = True, categories = clarity_order)
diamonds['clarity'] = diamonds['clarity'].astype(ordered_clarity)

base_color = sb.color_palette()[0]
sb.countplot(data = diamonds, x = 'clarity', color = base_color);

# 1. bivariate plot of price vs. carat
plt.scatter(data = diamonds, x = 'carat', y = 'price', alpha = 0.5);

# 2. bivariate plot of price vs. carat
plt.scatter(data = diamonds, x = 'carat', y = 'price', alpha = 0.5)
plt.yscale('log')
tick_locs = [300,500,1000,1500,3000,5000,10000,20000]
plt.yticks(tick_locs,tick_locs);

# 3. bivariate plot of price vs. carat
diamonds['side'] = pow(diamonds['carat'], 1/3)

plt.scatter(data = diamonds, x = 'side', y = 'price', alpha = 0.5)

plt.yscale('log')
tick_locs = [300,500,1000,1500,3000,5000,10000,20000]
plt.yticks(tick_locs,tick_locs);

# 1. bivariate plots of price vs. cut, color, clarity
plt.figure(figsize = [15,5])
base_color = sb.color_palette()[0]

plt.subplot(1,3,1)
ax1 = sb.boxplot(data = diamonds, x = 'cut', y = 'price', color = base_color);

plt.subplot(1,3,2)
sb.boxplot(data = diamonds, x = 'color', y = 'price', color = base_color);
plt.ylim(ax1.get_ylim())

plt.subplot(1,3,3)
sb.boxplot(data = diamonds, x = 'clarity', y = 'price', color = base_color);
plt.ylim(ax1.get_ylim())

# 2. bivariate plots of price vs. cut, color, clarity
plt.figure(figsize = [5,15])
base_color = sb.color_palette()[0]

plt.subplot(3,1,1)
ax1 = sb.violinplot(data = diamonds, x = 'cut', y = 'price', color = base_color);

plt.subplot(3,1,2)
sb.violinplot(data = diamonds, x = 'color', y = 'price', color = base_color);
plt.ylim(ax1.get_ylim())

plt.subplot(3,1,3)
sb.violinplot(data = diamonds, x = 'clarity', y = 'price', color = base_color);
plt.ylim(ax1.get_ylim())

# bivariate plots of carat vs. cut, color, clarity
plt.figure(figsize = [5,15])
base_color = sb.color_palette()[0]

plt.subplot(3,1,1)
ax1 = sb.boxplot(data = diamonds, x = 'cut', y = 'carat', color = base_color);

plt.subplot(3,1,2)
sb.boxplot(data = diamonds, x = 'color', y = 'carat', color = base_color);
plt.ylim(ax1.get_ylim())

plt.subplot(3,1,3)
sb.boxplot(data = diamonds, x = 'clarity', y = 'carat', color = base_color);
plt.ylim(ax1.get_ylim())


# 1. multivariate plot of price by carat weight, and clarity
g = sb.FacetGrid(data = diamonds, hue = 'clarity', size = 5)
g.map(plt.scatter, 'carat', 'price')
g.set(yscale = 'log')
g.add_legend();
plt.xlabel('carat');
plt.ylabel('price');

# 2. multivariate plot of price by carat weight, and clarity
g = sb.FacetGrid(data = diamonds, col = 'clarity', size = 2.5, col_wrap = 4)
g.map(plt.scatter, 'carat', 'price');

# multivariate plot of price by cut and color, for approx. 1 carat diamonds
diamonds_sub = diamonds.loc[(diamonds['carat'] >= 0.9) & (diamonds['carat'] <= 1.1)]
sb.pointplot(data = diamonds_sub, x = 'cut', y = 'price', hue = 'color', dodge = 0.5, linestyles = "");
